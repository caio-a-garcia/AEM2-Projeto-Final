df$soma_sqft <- NULL
# Obtendo porcentagem de área com porão
df$basement_percent <- df$sqft_basement/df$sqft_living
# Retirando as colunas sqft_basement e sqft_above do dataframe
df$sqft_above <- NULL
df$sqft_basement <- NULL
# Visualizando o resultado
head(df, 10)
ggplot(df, aes(x = basement_percent*100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do Percentual de porão",
x = "Percentual de porão em relação a área habitavel",
y = "Frequência") +
theme_minimal()
df$sqft_living15 <- NULL
df$sqft_lot15 <- NULL
# df modificado
df_basement_percent_mod <- df[df$basement_percent > 0, ]
ggplot(df_basement_percent_mod, aes(x = basement_percent * 100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do Percentual de porão",
x = "Percentual de porão em relação a área habitável",
y = "Frequência") +
theme_minimal()
ggplot(df[df$basement_percent > 0, ], aes(x = basement_percent * 100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do Percentual de porão",
x = "Percentual de porão em relação a área habitável",
y = "Frequência") +
theme_minimal()
library("tidyverse")
# Lendo o arquivo csv
df <- read.csv("data/kc_house_data.csv")
# Visualizando as primeiras linhas
head(df, 10)
nrow(df)
colSums(is.na(df))
str(df)
# Transformando coluna date em datetime
df$date <- as.POSIXct(df$date, format="%Y%m%dT%H%M%S")
# Visualizando mudança
class(df$date)
any(duplicated(df))
any(duplicated(df$id))
# Salvando IDs duplicados em um vetor
id_duplicados <- unique(df$id[duplicated(df$id)])
# Criando dataframe com as linhas de IDs duplicados
df_id_duplicados <- df[df$id %in% id_duplicados, ]
head(df_id_duplicados, 15)
# Removendo observações duplicadas desatualizadas
df <- df %>%
group_by(id) %>%
arrange(desc(date)) %>%
slice(1)
# Visualizando resultado
any(duplicated(df$id))
# Criando coluna com o ano
df$date_year <- format(df$date, "%Y")
# Formatando coluna para int
df$date_year <- as.integer(df$date_year)
# Cálculando a idade do imóvel
df$age <- df$date_year - df$yr_built
# Removendo colunas date_year e yr_built
df$date_year <- NULL
df$yr_built <- NULL
# Visualizando o resultado
head(df, 10)
# Cálculando porcentagem de linhas com valores diferentes de zero
(nrow(df[df$yr_renovated != 0, ])/nrow(df))*100
# Criando coluna binaria
df$renovated <- ifelse(df$yr_renovated == 0, 0, 1)
# Retirando coluna yr_renovated do dataframe
df$yr_renovated <- NULL
# Visualizando os resultados
head(df, 10)
# Criando coluna de comparação
df$soma_sqft <- df$sqft_above + df$sqft_basement
# Verificando se há diferenças
dif_sqft <- sum(df$soma_sqft != df$sqft_living)
# Criando teste lógico
if (dif_sqft == 0) {
print("A soma de sqft_above e sqft_basement é igual a sqft_living para todas as observações.")
} else {
print("Existem diferenças na soma de sqft_above e sqft_basement em relação a sqft_living.")
}
# Retirando coluna do dataframe
df$soma_sqft <- NULL
# Obtendo porcentagem de área com porão
df$basement_percent <- df$sqft_basement/df$sqft_living
# Retirando as colunas sqft_basement e sqft_above do dataframe
df$sqft_above <- NULL
df$sqft_basement <- NULL
# Visualizando o resultado
head(df, 10)
ggplot(df, aes(x = basement_percent*100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do Percentual de porão",
x = "Percentual de porão em relação a área habitavel",
y = "Frequência") +
theme_minimal()
ggplot(df[df$basement_percent > 0, ], aes(x = basement_percent * 100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do Percentual de porão",
x = "Percentual de porão em relação a área habitável",
y = "Frequência") +
theme_minimal()
df$sqft_living15 <- NULL
df$sqft_lot15 <- NULL
# Criando nova métrica
df$lot_percent <- df$sqft_lot / df$sqft_living
# Retirando coluna do dataframe
df$sqft_lot <- NULL
# Visualizando dataframe
head(df, 10)
ggplot(df, aes(x = lot_percent)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do tamanho do lote em relação a área habitavel",
x = "Percentual de tamanho do lote em relação a área habitavel",
y = "Frequência") +
theme_minimal()
ggplot(df, aes(x = lot_percent*100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do tamanho do lote em relação a área habitavel",
x = "Percentual de tamanho do lote em relação a área habitavel",
y = "Frequência") +
theme_minimal()
ggplot(df, aes(x = lot_percent)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do tamanho do lote em relação a área habitavel",
x = "Percentual de tamanho do lote em relação a área habitavel",
y = "Frequência") +
theme_minimal()
df[df$lot_percent> 100, ]
ggplot(df[df$lot_percent<200, ], aes(x = lot_percent)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do tamanho do lote em relação a área habitavel",
x = "Percentual de tamanho do lote em relação a área habitavel",
y = "Frequência") +
theme_minimal()
ggplot(df[df$lot_percent<100, ], aes(x = lot_percent)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do tamanho do lote em relação a área habitavel",
x = "Percentual de tamanho do lote em relação a área habitavel",
y = "Frequência") +
theme_minimal()
library("tidyverse")
# Lendo o arquivo csv
df <- read.csv("data/kc_house_data.csv")
# Visualizando as primeiras linhas
head(df, 10)
nrow(df)
colSums(is.na(df))
str(df)
# Transformando coluna date em datetime
df$date <- as.POSIXct(df$date, format="%Y%m%dT%H%M%S")
# Visualizando mudança
class(df$date)
any(duplicated(df))
any(duplicated(df$id))
# Salvando IDs duplicados em um vetor
id_duplicados <- unique(df$id[duplicated(df$id)])
# Criando dataframe com as linhas de IDs duplicados
df_id_duplicados <- df[df$id %in% id_duplicados, ]
head(df_id_duplicados, 15)
# Removendo observações duplicadas desatualizadas
df <- df %>%
group_by(id) %>%
arrange(desc(date)) %>%
slice(1)
# Visualizando resultado
any(duplicated(df$id))
# Criando coluna com o ano
df$date_year <- format(df$date, "%Y")
# Formatando coluna para int
df$date_year <- as.integer(df$date_year)
# Cálculando a idade do imóvel
df$age <- df$date_year - df$yr_built
# Removendo colunas date_year e yr_built
df$date_year <- NULL
df$yr_built <- NULL
# Visualizando o resultado
head(df, 10)
# Cálculando porcentagem de linhas com valores diferentes de zero
(nrow(df[df$yr_renovated != 0, ])/nrow(df))*100
# Criando coluna binaria
df$renovated <- ifelse(df$yr_renovated == 0, 0, 1)
# Retirando coluna yr_renovated do dataframe
df$yr_renovated <- NULL
# Visualizando os resultados
head(df, 10)
# Criando coluna de comparação
df$soma_sqft <- df$sqft_above + df$sqft_basement
# Verificando se há diferenças
dif_sqft <- sum(df$soma_sqft != df$sqft_living)
# Criando teste lógico
if (dif_sqft == 0) {
print("A soma de sqft_above e sqft_basement é igual a sqft_living para todas as observações.")
} else {
print("Existem diferenças na soma de sqft_above e sqft_basement em relação a sqft_living.")
}
# Retirando coluna do dataframe
df$soma_sqft <- NULL
# Obtendo porcentagem de área com porão
df$basement_percent <- df$sqft_basement/df$sqft_living
# Retirando as colunas sqft_basement e sqft_above do dataframe
df$sqft_above <- NULL
df$sqft_basement <- NULL
# Visualizando o resultado
head(df, 10)
ggplot(df, aes(x = basement_percent*100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do Percentual de porão",
x = "Percentual de porão em relação a área habitavel",
y = "Frequência") +
theme_minimal()
ggplot(df[df$basement_percent > 0, ], aes(x = basement_percent * 100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do Percentual de porão",
x = "Percentual de porão em relação a área habitável",
y = "Frequência") +
theme_minimal()
df$sqft_living15 <- NULL
df$sqft_lot15 <- NULL
# Criando nova métrica
df$lot_percent <- df$sqft_living / df$sqft_lot
# Retirando coluna do dataframe
df$sqft_lot <- NULL
# Visualizando dataframe
head(df, 10)
ggplot(df, aes(x = lot_percent*100)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribuição do tamanho do lote em relação a área habitavel",
x = "Indice de proporção do tamanho do lote em relação a área habitavel",
y = "Frequência") +
theme_minimal()
df
## Preditoras de Localização
df
# Criando métrica
df$price_sqft <- df$price / df$sqft_living
# Observando a normalização com relação ao preço
grafico1 <- ggplot(df, aes(x = sqft_living, y = price)) +
geom_point() +
labs(title = "Tamamho do impóvel x preço",
x = "Tamanho do impovel",
y = "Preço") +
theme_minimal()
grafico2<- ggplot(df, aes(x = sqft_living, y = price_sqft)) +
geom_point() +
labs(title = "Tamamho do impóvel x preço por feet quadrado",
x = "Tamanho do impovel",
y = "Preço por feet quadrado") +
theme_minimal()
# Plotando
grid.arrange(grafico1, grafico2, ncol = 2)
library("tidyverse")
library("gridExtra")
# Criando métrica
df$price_sqft <- df$price / df$sqft_living
# Observando a normalização com relação ao preço
grafico1 <- ggplot(df, aes(x = sqft_living, y = price)) +
geom_point() +
labs(title = "Tamamho do impóvel x preço",
x = "Tamanho do impovel",
y = "Preço") +
theme_minimal()
grafico2<- ggplot(df, aes(x = sqft_living, y = price_sqft)) +
geom_point() +
labs(title = "Tamamho do impóvel x preço por feet quadrado",
x = "Tamanho do impovel",
y = "Preço por feet quadrado") +
theme_minimal()
# Plotando
grid.arrange(grafico1, grafico2, ncol = 2)
library(tidyverse)
library(gridExtra)
library(leaflet)
install.packages("leaflet")
library(tidyverse)
library(gridExtra)
library(leaflet)
df
# Visualize os dados em um mapa interativo usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~price_sqft,
radius = 5,
fillOpacity = 0.7
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric("viridis", domain = NULL),
values = ~price_sqft,
title = "Preço por m²"
)
mapa
# Visualize os dados em um mapa interativo usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~price_sqft,
radius = 5,
fillOpacity = 0.7
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric(palette = "viridis", domain = df$price_sqft),
values = ~price_sqft,
title = "Preço por m²"
)
mapa
# Visualize os dados em um mapa interativo usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~price_sqft,
radius = 5,
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric(palette = "viridis", domain = df$price_sqft),
values = ~price_sqft,
title = "Preço por m²"
)
mapa
# Crie o mapa de calor usando leaflet
mapa_calor <- leaflet(df) %>%
addTiles() %>%
addHeatmap(
~long, ~lat,
intensity = ~price_sqft,
blur = 20,
max = max(df$price_sqft),
radius = 10
) %>%
addLegend(
position = "bottomright",
title = "Preço por m²",
pal = colorNumeric(palette = "viridis", domain = df$price_sqft)
)
# Crie o mapa de calor usando leaflet
mapa_calor <- leaflet(df) %>%
addTiles() %>%
addHeatmap(
~long, ~lat,
intensity = ~price_sqft,
blur = 20,
max = max(df$price_sqft),
radius = 10
) %>%
addLegend(
position = "bottomright",
title = "Preço por m²",
pal = colorNumeric(palette = "viridis", domain = NULL)
)
# Crie o mapa de calor usando leaflet
mapa_calor <- leaflet(df) %>%
addTiles() %>%
addHeatmap(
~long, ~lat,
intensity = ~price_sqft,
blur = 20,
max = max(df$price_sqft),
radius = 10
)
library(tidyverse)
library(gridExtra)
library(leaflet)
library(leaflet.extras)
install.packages("leaflet.extra"s)
install.packages("leaflet.extras")
library(tidyverse)
library(gridExtra)
library(leaflet)
library(leaflet.extras)
# Crie o mapa de calor usando leaflet
mapa_calor <- leaflet(df) %>%
addTiles() %>%
addHeatmap(
lng = ~long,
lat = ~lat,
intensity = ~price_sqft,
radius = 20,
blur = 10
) %>%
addLegend(
position = "bottomright",
title = "Preço por m²",
pal = colorNumeric(palette = "viridis", domain = df$price_sqft)
)
# Crie o mapa de calor usando leaflet
mapa_calor <- leaflet(df) %>%
addTiles() %>%
addHeatmap(
lng = ~long,
lat = ~lat,
intensity = ~price_sqft,
radius = 20,
blur = 10
) %>%
addLegend(
position = "bottomright",
title = "Preço por m²",
pal = colorNumeric(palette = "viridis", values = df$price_sqft)
)
# Crie o mapa de calor usando leaflet
mapa_calor <- leaflet(df) %>%
addTiles() %>%
addHeatmap(
lng = ~long,
lat = ~lat,
intensity = ~price_sqft,
radius = 20,
blur = 10
)
mapa_calor
# Crie o mapa de calor usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~price_sqft,
radius = 5,
fillOpacity = 0.7
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric(palette = "viridis", domain = df$price_sqft),
values = ~price_sqft,
title = "Preço por m²"
)
mapa
# Crie o mapa de calor usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~price_sqft,
radius = 5,
fillOpacity = 0.7
)
mapa
# Crie o mapa de calor usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~as.numeric(price_sqft),
radius = 5,
fillOpacity = 0.7
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric(palette = "viridis", domain = df$price_sqft),
values = ~as.numeric(price_sqft),
title = "Preço por m²"
)
mapa
class(price_sqft)
class(df#price_sqft)
class(df$price_sqft)
class(df$price_sqft)
# Crie o mapa de calor usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~as.numeric(price_sqft),
radius = 5,
fillOpacity = 0.7,
colorPalette = "grayscale"
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric(palette = "grayscale", domain = df$price_sqft),
values = ~as.numeric(price_sqft),
title = "Preço por m²"
)
# Crie o mapa de calor usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~as.numeric(price_sqft),
radius = 5,
fillOpacity = 0.7,
colorPalette = "grayscale"
)
# Crie o mapa de calor usando leaflet
mapa <- leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
~long, ~lat,
color = ~as.numeric(price_sqft),
radius = 5,
fillOpacity = 0.7
) %>%
addLegend(
position = "bottomright",
pal = colorNumeric(palette = "viridis", domain = df$price_sqft),
values = ~as.numeric(price_sqft),
title = "Preço por m²"
)
mapa
df
df$date <- NULL
df$id <- NULL
write.csv(df, "data/df_pre_processamento.csv", row.names = FALSE)
